ggplot(rdd,aes(x=test,y=earn,color='Raw'))+geom_point()+
geom_vline(aes(xintercept=75),col='blue')+
labs(x='Test Score',
y='Earnings')+
geom_smooth(aes(color='Regression'),method='lm',se=FALSE,formula=y~x+I(x>=75)+x*I(x>=75))+
geom_segment(aes(x=73,xend=75,y=rdmeans$E[1],yend=rdmenas$E[1],color='Our Method'))+
scale_color_manual(values=c('Raw'='black','Regression'='red','Our Method'='gold'))
ggplot(rdd,aes(x=test,y=earn,color='Raw'))+geom_point()+
geom_vline(aes(xintercept=75),col='blue')+
labs(x='Test Score',
y='Earnings')+
geom_smooth(aes(color='Regression'),method='lm',se=FALSE,formula=y~x+I(x>=75)+x*I(x>=75))+
geom_segment(aes(x=73,xend=75,y=rdmeans$E[1],yend=rdmeans$E[1],color='Our Method'))+
scale_color_manual(values=c('Raw'='black','Regression'='red','Our Method'='gold'))
ggplot(rdd,aes(x=test,y=earn,color='Raw'))+geom_point()+
geom_vline(aes(xintercept=75),col='blue')+
labs(x='Test Score',
y='Earnings')+
geom_smooth(aes(color='Regression'),method='lm',se=FALSE,formula=y~x+I(x>=75)+x*I(x>=75))+
geom_segment(aes(x=73,xend=75,y=rdmeans$E[1],yend=rdmeans$E[1],color='Our Method'),size=2)+
scale_color_manual(values=c('Raw'='black','Regression'='red','Our Method'='gold'))
ggplot(rdd,aes(x=test,y=earn,color='Raw'))+geom_point()+
geom_vline(aes(xintercept=75),col='blue')+
labs(x='Test Score',
y='Earnings')+
geom_smooth(aes(color='Regression'),method='lm',se=FALSE,formula=y~x+I(x>=75)+x*I(x>=75))+
geom_segment(aes(x=73,xend=75,y=rdmeans$E[1],yend=rdmeans$E[1],color='Our Method'),size=2)+
scale_color_manual(values=c('Raw'='black','Regression'='red','Our Method'='blue'))
ggplot(rdd,aes(x=test,y=earn,color='Raw'))+geom_point()+
geom_vline(aes(xintercept=75),col='blue')+
labs(x='Test Score',
y='Earnings')+
geom_smooth(aes(color='Regression'),method='lm',se=FALSE,formula=y~x+I(x>=75)+x*I(x>=75))+
geom_segment(aes(x=73,xend=75,y=rdmeans$E[1],yend=rdmeans$E[1],color='Our Method'),size=2)+
geom_segment(aes(x=75,xend=77,y=rdmeans$E[2],yend=rdmeans$E[2],color='Our Method'),size=2)+
scale_color_manual(values=c('Raw'='black','Regression'='red','Our Method'='blue'))
quaddata <- tibble(x = rnormal(1000)) %>%
mutate(y = x + x^2 + rnormal(1000))
ggplot(quaddata,aes(y=y,x=x))+geom_point()
quaddata <- tibble(x = rnorm(1000)) %>%
mutate(y = x + x^2 + rnorm(1000))
ggplot(quaddata,aes(y=y,x=x))+geom_point()
quaddata <- tibble(x = rnorm(1000)) %>%
mutate(y = x + x^2 + rnorm(1000)) %>%
group_by(cut(x,breaks=10)) %>%
mutate(y.exp = mean(y)) %>%
ungroup() %>%
mutate(y.exp.reg = predict(lm(y~x)))
ggplot(quaddata,aes(y=y,x=x,color='Raw'))+geom_point(alpha=.2)+
geom_point(aes(x=x,y=y.exp,color='Our Method'))+
geom_point(aes(x=x,y=y.exp.reg,color='Regression'))+
scale_color_manual(values=c('Raw'='black','Our Method'='red','Regression'='blue'))
quaddata <- quaddata %>%
mutate(y.exp.reg = predict(lm(y~x+I(x^2))))
ggplot(quaddata,aes(y=y,x=x,color='Raw'))+geom_point(alpha=.2)+
geom_point(aes(x=x,y=y.exp,color='Our Method'))+
geom_point(aes(x=x,y=y.exp.reg,color='Quadratic Regression'))+
scale_color_manual(values=c('Raw'='black','Our Method'='red','Quadratic Regression'='blue'))
rdd <- tibble(test = runif(300)*100) %>%
mutate(GATE = test >= 75,
above = test >= 75) %>%
mutate(earn = runif(300)*40+10*GATE+test/2)
rdd <- rdd %>%
mutate(above = above >= 75,
zeroedtest = test-75)
rdmeans <- rdd %>% filter(between(test,73,77)) %>%
group_by(above) %>%
summarize(E = mean(earn))
ggplot(rdd,aes(x=test,y=earn,color='Raw'))+geom_point()+
geom_vline(aes(xintercept=75),col='blue')+
labs(x='Test Score',
y='Earnings')+
geom_smooth(aes(color='Regression'),method='lm',se=FALSE,formula=y~x+I(x>=75)+x*I(x>=75))+
geom_segment(aes(x=73,xend=75,y=rdmeans$E[1],yend=rdmeans$E[1],color='Our Method'),size=2)+
geom_segment(aes(x=75,xend=77,y=rdmeans$E[2],yend=rdmeans$E[2],color='Our Method'),size=2)+
scale_color_manual(values=c('Raw'='black','Regression'='red','Our Method'='blue'))
rdmeans$E[2]
rdmeans
set.seed(1000)
rdd <- tibble(test = runif(300)*100) %>%
mutate(GATE = test >= 75,
above = test >= 75) %>%
mutate(earn = runif(300)*40+10*GATE+test/2)
rdd <- rdd %>%
mutate(above = above >= 75,
zeroedtest = test-75)
rdmeans <- rdd %>% filter(between(test,73,77)) %>%
group_by(above) %>%
summarize(E = mean(earn))
rdmeans
rdd <- rdd %>%
mutate(above = above >= 75,
zeroedtest = test-75)
rdmeans <- rdd %>% filter(between(test,72,78)) %>%
group_by(above) %>%
summarize(E = mean(earn))
rdmeans
sum(between(rdd$test,75,78))
rdd <- rdd %>%
mutate(above = test >= 75,
zeroedtest = test-75)
rdmeans <- rdd %>% filter(between(test,73,77)) %>%
group_by(above) %>%
summarize(E = mean(earn))
rdmeans
ggplot(rdd,aes(x=test,y=earn,color='Raw'))+geom_point()+
geom_vline(aes(xintercept=75),col='blue')+
labs(x='Test Score',
y='Earnings')+
geom_smooth(aes(color='Regression'),method='lm',se=FALSE,formula=y~x+I(x>=75)+x*I(x>=75))+
geom_segment(aes(x=73,xend=75,y=rdmeans$E[1],yend=rdmeans$E[1],color='Our Method'),size=2)+
geom_segment(aes(x=75,xend=77,y=rdmeans$E[2],yend=rdmeans$E[2],color='Our Method'),size=2)+
scale_color_manual(values=c('Raw'='black','Regression'='red','Our Method'='blue'))
reg.pos <- c(NA)
our.pos <- c(NA)
for (i in 1:10000) {
df <- tibble(x = runif(1000)) %>%
mutate(y = .01*x + rnorm(1000))
reg.pos[i] <- coef(lm(y~x,data=df))[2] >= 0
our.df <- df %>% group_by(cut(x,breaks=2)) %>%
summarize(y = mean(y))
our.pos[i] <- our.df$y[2] - our.df$y[1] > 0
}
mean(reg.pos)
mean(our.pos)
set.seed(123492)
reg.pos <- c(NA)
our.pos <- c(NA)
for (i in 1:10000) {
df <- tibble(x = runif(1000)) %>%
mutate(y = .01*x + rnorm(1000))
reg.pos[i] <- coef(lm(y~x,data=df))[2] >= 0
our.df <- df %>% group_by(cut(x,breaks=2)) %>%
summarize(y = mean(y))
our.pos[i] <- our.df$y[2] - our.df$y[1] > 0
}
mean(reg.pos)
mean(our.pos)
set.seed(1234)
reg.pos <- c(NA)
our.pos <- c(NA)
for (i in 1:10000) {
df <- tibble(x = runif(1000)) %>%
mutate(y = .01*x + rnorm(1000))
reg.pos[i] <- coef(lm(y~x,data=df))[2] >= 0
our.df <- df %>% group_by(cut(x,breaks=2)) %>%
summarize(y = mean(y))
our.pos[i] <- our.df$y[2] - our.df$y[1] > 0
}
mean(reg.pos)
mean(our.pos)
library(tidyverse)
df <- tibble(x = runif(1000)) %>%
mutate(y = x + rnorm(1000)) %>%
arrange(x) %>%
group_by(cut(x,breaks=20)) %>%
mutate(y.mean = mean(y)) %>%
ungroup()
ggplot(df,aes(x=x,y=y,color='Raw'))+geom_point(alpha=.2)+
geom_line(aes(x=x,y=y.mean,color='Our Method'))+
geom_smooth(aes(color='Regression'),method='lm',se=FALSE)+
labs(x='X',y='Y')+
scale_color_manual(values('Raw'='black','Our Method'='blue','Regression'='red'))
ggplot(df,aes(x=x,y=y,color='Raw'))+geom_point(alpha=.2)+
geom_line(aes(x=x,y=y.mean,color='Our Method'))+
geom_smooth(aes(color='Regression'),method='lm',se=FALSE)+
labs(x='X',y='Y')+
scale_color_manual(values=c('Raw'='black','Our Method'='blue','Regression'='red'))
ggplot(df,aes(x=x,y=y,color='Raw'))+geom_point(alpha=.2)+
geom_line(aes(x=x,y=y.mean,color='Our Method'),size=1)+
geom_smooth(aes(color='Regression'),method='lm',se=FALSE)+
labs(x='X',y='Y')+
scale_color_manual(values=c('Raw'='black','Our Method'='blue','Regression'='red'))
library(Ecdat)
data("Airline")
View(Airline)
class(Airline$airline)
data(Airline)
# Our method
AirlineOurMethod <- Airline %>% group_by(airline) %>%
mutate(output.r = output - mean(output),
cost.r = cost - mean(cost))
AirlineReg <- Airline %>%
mutate(output.reg = residuals(lm(output~factor(airline))),
cost.reg = residuals(lm(cost~factor(airline))))
c(cor(AirlineOurMethod$output.r,AirlineOurMethod$cost.r),
cor(AirlineReg$output.reg,AirlineReg$cost.reg))
load('mariel.Rdata')
load('mariel.RData')
load('mariel.RData')
df <- df %>%
#Take out Cubans
filter(!(ethnic == 5),
#Remove NILF
!(esr %in% c(4,5,6,7))) %>%
#Calculate hourly wage
mutate(hourwage=earnwke/uhourse,
#and unemp
unemp = esr == 3) %>%
#no log problems
filter((hourwage > 2 | is.na(hourwage)),(uhourse > 0 | is.na(uhourse))) %>%
#adjust for inflation to 1980 prices
mutate(hourwage = case_when(
year==79 ~ hourwage/.88,
year==81 ~ hourwage/1.1,
year==82 ~ hourwage/1.17,
year==83 ~ hourwage/1.21,
year==84 ~ hourwage/1.26,
year==85 ~ hourwage/1.31
))
#Take the log of wage and create our "after treatment" and "treated group" variables
df <- mutate(df,lwage = log(hourwage),
after = year >= 81,
miami = smsarank == 26)
means <- df %>% group_by(after,miami) %>% summarize(lwage = mean(lwage),unemp=mean(unemp))
means
means <- df %>% group_by(after,miami) %>% summarize(lwage = mean(lwage,na.rm=TRUE),unemp=mean(unemp))
means
(means$lwage[4] - means$lwage[2]) - (means$lwage[3]-means$lwage[1])
lm(lwage~after*miami)
lm(lwage~after*miami,data=df)
set.seed(1000)
rdd <- tibble(test = runif(300)*100) %>%
mutate(GATE = test >= 75,
above = test >= 75) %>%
mutate(earn = runif(300)*40+10*GATE+test/2)
rdd <- rdd %>%
mutate(above = test >= 75,
zeroedtest = test-75)
rdmeans <- rdd %>% filter(between(test,73,77)) %>%
group_by(above) %>%
summarize(E = mean(earn))
ggplot(rdd,aes(x=test,y=earn,color='Raw'))+geom_point()+
geom_vline(aes(xintercept=75),col='blue')+
labs(x='Test Score',
y='Earnings')+
geom_smooth(aes(color='Regression'),method='lm',se=FALSE,formula=y~x+I(x>=75)+x*I(x>=75))+
geom_segment(aes(x=73,xend=75,y=rdmeans$E[1],yend=rdmeans$E[1],color='Our Method'),size=2)+
geom_segment(aes(x=75,xend=77,y=rdmeans$E[2],yend=rdmeans$E[2],color='Our Method'),size=2)+
scale_color_manual(values=c('Raw'='black','Regression'='red','Our Method'='blue'))
std(c(1,2,3))
library(AER)
data(CigarettesSW)
CigarettesSW <- CigarettesSW %>%
mutate(cigtax = taxs-tax) %>%
mutate(price = price/cpi,
cigtax = cigtax/cpi) %>%
mutate(price = (price - mean(price))/sd(price),
packs = (packs - mean(packs))/sd(packs)) %>%
group_by(cut(cigtax,breaks=7)) %>%
summarize(priceexp = mean(price),
packsexp = mean(packs)) %>%
ungroup()
cor(CigarettesSW$priceexp,CigarettesSW$packsexp)
x.explained.with.z <- predict(lm(packs~cigtax,data=CigarettesSW))
lm(price~x.explained.with.z,data=CigarettesSW)
data(CigarettesSW)
x.explained.with.z <- predict(lm(packs~cigtax,data=CigarettesSW))
lm(price~x.explained.with.z,data=CigarettesSW)
CigarettesSW <- CigarettesSW %>%
mutate(cigtax = taxs-tax) %>%
mutate(price = price/cpi,
cigtax = cigtax/cpi) %>%
mutate(price = (price - mean(price))/sd(price),
packs = (packs - mean(packs))/sd(packs))
x.explained.with.z <- predict(lm(packs~cigtax,data=CigarettesSW))
lm(price~x.explained.with.z,data=CigarettesSW)
library(randomForest)
data("imports85")
View(imports85)
data("ConsumerGood")
View(ConsumerGood)
data("GoldSilver")
View(GoldSilver)
help(randomForest)
rf <- randomForest(GoldSilver$silver,GoldSilver$gold)
GoldSilver$silver
GoldSilver <- as.matrix(GoldSilver)
View(GoldSilver)
rf <- randomForest(GoldSilver$silver,GoldSilver$gold)
rf <- randomForest(GoldSilver[,'silver'],GoldSilver[,'gold'])
data(GoldSilver)
rf <- randomForest(x=GoldSilver$silver,y=GoldSilver$gold)
GoldSilver <- as.matrix(GoldSilver)
rf <- randomForest(x=GoldSilver[,'silver'],y=GoldSilver[,'gold'])
GoldSilver <- as.data.frame(GoldSilver)
rf <- randomForest(x=GoldSilver$silver,y=GoldSilver$gold)
rf <- randomForest(gold~silver,data=GoldSilver)
predict(rf)[1:5]
help(GoldSilver)
GoldSilver <- GoldSilver %>%
mutate(rf.predict = predict(rf),
reg.predict = predict(lm(gold~silver,data=GoldSilver)))
ggplot(GoldSilver,aes(x=silver,y=gold,color='Raw'))+geom_point(alpha=.2)+
geom_point(aes(x=silver,y=reg.predict,color='Regression'))+
geom_point(aes(x=silver,y=rf.predict,color='Rand. Forest'))+
labs(x='Silver Price',y='Gold Price')+
scale_color_manual(values=c('Raw'='black','Regression'='blue','Rand. Forest'='red'))
```{r, echo=FALSE, eval=TRUE, fig.width=8, fig.height=5}
ggplot(GoldSilver,aes(x=silver,y=gold,color='Raw'))+geom_point(alpha=.2)+
geom_point(aes(x=silver,y=rf.predict,color='Rand. Forest'))+
geom_point(aes(x=silver,y=reg.predict,color='Regression'))+
labs(x='Silver Price',y='Gold Price')+
scale_color_manual(values=c('Raw'='black','Regression'='blue','Rand. Forest'='red'))
ggplot(GoldSilver,aes(x=silver,y=gold,color='Raw'))+geom_point(alpha=.2)+
geom_point(aes(x=silver,y=rf.predict,color='Rand. Forest'),alpha=.5)+
geom_point(aes(x=silver,y=reg.predict,color='Regression'))+
labs(x='Silver Price',y='Gold Price')+
scale_color_manual(values=c('Raw'='black','Regression'='blue','Rand. Forest'='red'))
ggplot(GoldSilver,aes(x=silver,y=gold,color='Raw'))+geom_point(alpha=.2)+
labs(x='Silver Price',y='Gold Price')+
scale_color_manual(values=c('Raw'='black'))
rep(1:50*2,2)
dat <- data.frame(a = rep(1:50*2,2),
b = sample(c('Hi','Hello','Goodbye'),100,replace=T)) %>%
arrange(a) %>%
mutate(c = (b == 'Goodbye') | (a > 90) | (a <= 10))
sum(dat$a)
sum(dat$b %in% c('Hi','Hello'))
dat <- dat %>% group_by(b) %>% mutate(c.res = c - mean(c))
1 - var(dat$c.res)/var(dat$c)
help(rnorm)
x <- rexp(3000)
plot(density(x))
stargazer(x,type='text')
library(stargazer)
stargazer(x,type='text')
stargazer(as.data.frame(x),type='text')
x <- as.data.frame(rexp(3000))
stargazer(as.data.frame(x),type='text')
stargazer(x,type='text')
plot(density(x))
x <- rexp(3000)
plot(density(x),xlab='X',ylab='Density',main='Distribution of X')
abline(v=mean(x),col='blue')
abline(v=median(x),col='red')
stargazer(as.data.frame(x),type='text')
quantile(x,c(1:10/10))
table(at$c)
table(dat$c)
v
table(dat$b)
prop.table(table(dat$b))
barplot(table(dat$b))
barplot(prop.table(table(dat$b)))
plot(density((filter(dat,c==FALSE))$d))
dat <- dat %>% mutate(d = rnorm(100) + .3*a)
dat <- dat %>% ungroup() %>% mutate(d = rnorm(100) + .3*a)
plot(density((filter(dat,c==FALSE))$d))
curve(density((filter(dat,c==TRUE))$d))
line(density((filter(dat,c==TRUE))$d))
lines(density((filter(dat,c==TRUE))$d))
plot(density((filter(dat,c==FALSE))$d),col='red')
lines(density((filter(dat,c==TRUE))$d),col='blue')
meandiff <- dat %>% group_by(c) %>% summarize(d = mean(d))
meandiff$d[2] - meandiff$d[1]
plot(dat$a,dat$d)
explain <- dat $>$ group_by(cut(a,breaks=8)) %>% mutate(d.res = d - mean(d))
1 - var(dat$d.res)/var(dat$d)
explain <- dat %>% group_by(cut(a,breaks=8)) %>% mutate(d.res = d - mean(d))
1 - var(dat$d.res)/var(dat$d)
dat <- dat %>% group_by(cut(a,breaks=8)) %>% mutate(d.res = d - mean(d))
1 - var(dat$d.res)/var(dat$d)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
install.packages(c("broom", "callr", "car", "cli", "colorspace", "crayon", "desc", "dplyr", "evaluate", "fansi", "farver", "generics", "ggplot2", "glue", "gtable", "jsonlite", "knitr", "lme4", "magrittr", "maptools", "nloptr", "pillar", "pkgload", "processx", "ps", "quantreg", "RColorBrewer", "Rcpp", "RcppEigen", "rlang", "rprojroot", "rstudioapi", "scales", "sp", "stringi", "stringr", "testthat", "tibble", "tidyselect", "viridisLite", "waldo", "withr", "yaml"))
install.packages(c("broom", "callr", "car", "cli", "colorspace", "crayon", "desc", "dplyr", "evaluate", "fansi", "farver", "generics", "ggplot2", "glue", "gtable", "jsonlite", "knitr", "lme4", "magrittr", "maptools", "nloptr", "pillar", "pkgload", "processx", "ps", "quantreg", "RColorBrewer", "Rcpp", "RcppEigen", "rlang", "rprojroot", "rstudioapi", "scales", "sp", "stringi", "stringr", "testthat", "tibble", "tidyselect", "viridisLite", "waldo", "withr", "yaml"))
install.packages(c("broom", "callr", "car", "cli", "colorspace", "crayon", "desc", "dplyr", "evaluate", "fansi", "farver", "generics", "ggplot2", "glue", "gtable", "jsonlite", "knitr", "lme4", "magrittr", "maptools", "nloptr", "pillar", "pkgload", "processx", "ps", "quantreg", "RColorBrewer", "Rcpp", "RcppEigen", "rlang", "rprojroot", "rstudioapi", "scales", "sp", "stringi", "stringr", "testthat", "tibble", "tidyselect", "viridisLite", "waldo", "withr", "yaml"))
install.packages(c("broom", "callr", "car", "cli", "colorspace", "crayon", "desc", "dplyr", "evaluate", "fansi", "farver", "generics", "ggplot2", "glue", "gtable", "jsonlite", "knitr", "lme4", "magrittr", "maptools", "nloptr", "pillar", "pkgload", "processx", "ps", "quantreg", "RColorBrewer", "Rcpp", "RcppEigen", "rlang", "rprojroot", "rstudioapi", "scales", "sp", "stringi", "stringr", "testthat", "tibble", "tidyselect", "viridisLite", "waldo", "withr", "yaml"))
install.packages(c("broom", "callr", "car", "cli", "colorspace", "crayon", "desc", "dplyr", "evaluate", "fansi", "farver", "generics", "ggplot2", "glue", "gtable", "jsonlite", "knitr", "lme4", "magrittr", "maptools", "nloptr", "pillar", "pkgload", "processx", "ps", "quantreg", "RColorBrewer", "Rcpp", "RcppEigen", "rlang", "rprojroot", "rstudioapi", "scales", "sp", "stringi", "stringr", "testthat", "tibble", "tidyselect", "viridisLite", "waldo", "withr", "yaml"))
install.packages(c("broom", "callr", "car", "cli", "colorspace", "crayon", "desc", "dplyr", "evaluate", "fansi", "farver", "generics", "ggplot2", "glue", "gtable", "jsonlite", "knitr", "lme4", "magrittr", "maptools", "nloptr", "pillar", "pkgload", "processx", "ps", "quantreg", "RColorBrewer", "Rcpp", "RcppEigen", "rlang", "rprojroot", "rstudioapi", "scales", "sp", "stringi", "stringr", "testthat", "tibble", "tidyselect", "viridisLite", "waldo", "withr", "yaml"))
install.packages(c("broom", "callr", "car", "cli", "colorspace", "crayon", "desc", "dplyr", "evaluate", "fansi", "farver", "generics", "ggplot2", "glue", "gtable", "jsonlite", "knitr", "lme4", "magrittr", "maptools", "nloptr", "pillar", "pkgload", "processx", "ps", "quantreg", "RColorBrewer", "Rcpp", "RcppEigen", "rlang", "rprojroot", "rstudioapi", "scales", "sp", "stringi", "stringr", "testthat", "tibble", "tidyselect", "viridisLite", "waldo", "withr", "yaml"))
install.packages(c("broom", "callr", "car", "cli", "colorspace", "crayon", "desc", "dplyr", "evaluate", "fansi", "farver", "generics", "ggplot2", "glue", "gtable", "jsonlite", "knitr", "lme4", "magrittr", "maptools", "nloptr", "pillar", "pkgload", "processx", "ps", "quantreg", "RColorBrewer", "Rcpp", "RcppEigen", "rlang", "rprojroot", "rstudioapi", "scales", "sp", "stringi", "stringr", "testthat", "tibble", "tidyselect", "viridisLite", "waldo", "withr", "yaml"))
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
q()
install.packages(c("broom", "callr", "car", "cli", "colorspace", "crayon", "desc", "dplyr", "evaluate", "fansi", "farver", "generics", "ggplot2", "glue", "gtable", "jsonlite", "knitr", "lme4", "magrittr", "maptools", "nloptr", "pillar", "pkgload", "processx", "ps", "quantreg", "RColorBrewer", "Rcpp", "RcppEigen", "rlang", "rprojroot", "rstudioapi", "scales", "sp", "stringi", "stringr", "testthat", "tibble", "tidyselect", "viridisLite", "waldo", "withr", "yaml"))
q()
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
library(purrr)
library(patchwork)
library(ggpubr)
theme_set(theme_gray(base_size = 15))
handedness_data <- data.frame(hand = c(rep('Left', 9*452),rep('Ambidextrous',.5*452),rep('Right',90.5*452)))
library(tidyverse)
handedness_data %>%
pull(hand) %>%
table() %>%
prop.table()
ggplot(handedness_data, aes(x = hand)) +
geom_bar(fill = 'white', color = 'black') + # These two lines are important
stat_count(geom = "text", size = 5,
aes(label = scales::percent(..count../nrow(handedness_data)),
y = ..count.. + 1300)) +
ggpubr::theme_pubr() +
labs(x = 'Handedness', y = 'Count') # The rest is just decoration
data(Scorecard, package = 'pmdplyr')
install.packages("pmdplyr")
q()
install.packages("pmdplyr")
install.packages("Rtools")
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
theme_set(theme_gray(base_size = 15))
#Read in data
salary <- read.csv(text="Experience,Salary
0.11508951406649626, 89130.43478260869
1.877024722932652, 92521.73913043478
4.128303495311169, 96956.52173913045
5.890238704177326, 100347.82608695651
8.044117647058828, 104000
10.051577152600172, 106869.5652173913
12.205882352941181, 110000
14.654731457800512, 112608.6956521739
16.956308610400683, 115478.26086956522
19.01300085251492, 118086.95652173912
19.99168797953965, 120173.91304347827
21.8994032395567, 125130.4347826087
23.758312020460362, 129826.08695652173
25.665387894288155, 135565.21739130435
27.425618073316286, 141043.47826086957
29.67455242966753, 148347.82608695654")
#Use ggplot to plot out data
ggplot(salary,aes(x=Experience,y=Salary))+
#with a smoothed line graph
stat_smooth(method = lm, formula = y ~ poly(x, 10), se = FALSE)+
#Have y-axis start at 50k
expand_limits(y=50000)+
#Add labels
labs(title="Data Scientist Salary by Experience",subtitle="Data from Glassdoor; avg college grad starts $49,875")+
xlab("Experience (Years)")
#Read in data
topjobs <- read.csv(text="Job,Salary,UsesData
Market Research Analyst,71450,A Lot
Economic Consultant,112650,A Lot
Comp & Bfts Manager,130010,A Lot
Actuary,114850,A Lot
Credit Analyst,82900,A Little
Financial Analyst,99430,A Little
Policy Analyst,112030,A Lot
Lawyer,141890,Not a Lot
Management Consultant,93440,A Little
Business Reporter,67500,Not a Lot")
#Sort so it goes from lowest salary to highest
topjobs$Job <- reorder(topjobs$Job, topjobs$Salary)
#Reorder factor so it goes least to most
topjobs$UsesData <- factor(topjobs$UsesData,levels=c("Not a Lot","A Little","A Lot"))
#Plot out
ggplot(topjobs,aes(x=Job,y=Salary/1000,fill=UsesData))+
#With a bar graph
geom_col()+
#Label
ylab("Avg. Salary (Thousands)")+xlab(element_blank())+
labs(title="Do Top-Ten Econ Major Jobs Use Data?")+
#Rotate job labels so they fit
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Read in data
gdp <- read.csv('GDP.csv')
#Get GDP in the first year of data using dplyr
gdp <- gdp %>%
group_by(Country) %>%
mutate(firstGDP=GDP[1]) %>%
mutate(gdprel=GDP/firstGDP)
#Plot data
ggplot(gdp,aes(x=Year,y=gdprel,color=Country))+
#Line graph
geom_line()+
#Label
xlab("Year")+ylab("GDP Relative to 1960")+
theme(legend.title=element_blank())
#Read in data
data(co2)
#Plot, cex for bigger font
plot(co2,xlab="Year",ylab="Atmospheric CO2 Concentration",cex=1.75)
q()
q()
install.package("Statamarkdown")
install.packages("Statamarkdown")
install.packages(remotes)
install.packages("remotes")
install_github("hemken/Statamarkdown")
library(remotes)
install.packages("installr")
library(installr)
updateR()
install.packages("remotes")
install.packages("Rtools")
install_github("hemken/Statamarkdown")
library(remotes)
install_github("hemken/Statamarkdown")
library(Statamarkdown)
library(Statamarkdown)
library(vtable)
install.packages("pmdplyr")
install_github("NickCH-K/pmdplyr")
devtools::install_github("NickCH-K/pmdplyr")
install.packages("devtools")
install_github("NickCH-K/pmdplyr")
devtools::install_github("NickCH-K/pmdplyr")
